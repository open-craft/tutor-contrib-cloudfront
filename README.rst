CloudFront plugin for Tutor
###############################################################################

A Tutor plugin to create CloudFront resources for Open edX instances.

The plugin is only responsible for creating resources. If you need to update or
delete resources, make sure to do that manually.

Installation
************

.. code-block:: bash

    pip install git+https://github.com/open-craft/tutor-contrib-cloudfront

Usage
*****

Add the following to the config:

.. code-block:: yaml

    CLOUDFRONT_AWS_ACCESS_KEY_ID: <AWS access key ID>
    CLOUDFRONT_AWS_SECRET_ACCESS_KEY: <AWS secret access key>
    CLOUDFRONT_AWS_REGION: <AWS region>  # Default us-east-1, be aware of CloudFront limitations
    CLOUDFRONT_LMS_DOMAIN: <LMS domain>  # Default {{ LMS_HOST }}
    CLOUDFRONT_CMS_DOMAIN: <CMS domain>  # Default {{ CMS_HOST }}
    CLOUDFRONT_CACHE_CONFIG:
        min_ttl: 0        # Default 0
        default_ttl: 300  # Default 300
        max_ttl: 3600     # Default 3600
    CLOUDFRONT_EXTRA_DOMAINS:
        - domain: <domain name>
          alias: <alias of the domain>
          certificate_arn: <ARN of the Certificate in AWS>

Enable the plugin and create monitoring policy:

.. code-block:: bash

    tutor plugins enable cloudfront
    tutor cloudfront create-cloudfront-resources

MFEs
****

Because MFE's aren't served using standard Django mechanisms, there is more
complex steps to setting MFE's behind a CloudFront CDN. We do not going
recommend this route unless your load characteristics require it as the
implementation at this stage is filled with caveats.

To serve the static assets generated by Tutor's MFE container, we need to have
two things in place:

* The DNS records for the MFE domain (usually `apps.your-domain`) needs to point
  to CloudFront's.
* The MFE static assets need to be available under another public domain that
  CloudFront will fetch them from.

With all that preamble out of the way, here are the steps to set up MFE's so
that they are served by CloudFront.

1. Add the `CLOUDFRONT_EXTRA_DOMAINS` to your instance's `config.yml`.
   CloudFront will fetch static assets to cache from this domain. Eg.
   
   .. code-block:: yaml

       CLOUDFRONT_EXTRA_DOMAINS:
         - domain: apps.example.com
           alias: apps-static.example.com
           certificate_arn: <ARN of the Certificate in AWS>

2. Make sure the `SHARED_COOKIE_DOMAIN`_ setting is set correctly so that your
   cookies are available under your MFE and LMS domains.

3. Add a CNAME record for your MFE that points to the generated CloudFront
   domain. For example,  `apps.example.com` => `d1cxhc3mkz88ug.cloudfront.net`.

.. _SHARED_COOKIE_DOMAIN: https://github.com/openedx/edx-platform/blob/16955828e7dc88322cfaaef5f95a5daa3816e84e/cms/envs/production.py#LL223C34-L223C35

License
*******

This software is licensed under the terms of the AGPLv3, see LICENSE.txt.
